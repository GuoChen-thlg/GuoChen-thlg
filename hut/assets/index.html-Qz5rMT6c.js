import{_ as s,c as i,o as n,a}from"./app-Ca2TgDfR.js";const e={},l=a(`<p>在前端,在浏览器中运行的 js 是没有模块的概念的,但如果把 js 放在服务器上运行,若只是简单的代码还好说,如果在大型项目中就会显得非常复杂加难以迭代维护,所以 node 引入了模块的概念。<br> 那模块是如何实现互不影响,各自分离的呢?</p><p>我们知道在 js 中想要实现代码之间的互不影响,可以使用函数来加以分隔,使函数内部的变量待在自己的作用域范围内.<br></p><p>那 node 是不是这样实现的呢?问题来了,如何验证是在函数内部?<br> 在函数中有个特殊的变量 arguments</p><p>新建 index.js</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">arguments</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//   &#39;0&#39;: {},</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//   &#39;1&#39;: [Function: require] {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//     resolve: [Function: resolve] { paths: [Function: paths] },</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//     main: Module {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//       id: &#39;.&#39;,</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//       path: &#39;c:\\\\Users\\\\Administrator\\\\Desktop\\\\node&#39;,</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//       exports: {},</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//       parent: null,</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//       filename: &#39;c:\\\\Users\\\\Administrator\\\\Desktop\\\\node\\\\index.js&#39;,</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//       loaded: false,</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//       children: [],</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//       paths: [Array]</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//     },</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//     extensions: [Object: null prototype] {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//       &#39;.js&#39;: [Function],</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//       &#39;.json&#39;: [Function],</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//       &#39;.node&#39;: [Function]</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//     },</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//     cache: [Object: null prototype] {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//       &#39;c:\\\\Users\\\\Administrator\\\\Desktop\\\\node\\\\index.js&#39;: [Module]</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//     }</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//   },</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//   &#39;2&#39;: Module {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//     id: &#39;.&#39;,</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//     path: &#39;c:\\\\Users\\\\Administrator\\\\Desktop\\\\node&#39;,</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//     exports: {},</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//     parent: null,</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//     filename: &#39;c:\\\\Users\\\\Administrator\\\\Desktop\\\\node\\\\index.js&#39;,</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//     loaded: false,</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//     children: [],</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//     paths: [</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//       &#39;c:\\\\Users\\\\Administrator\\\\Desktop\\\\node\\\\node_modules&#39;,</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//       &#39;c:\\\\Users\\\\Administrator\\\\Desktop\\\\node_modules&#39;,</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//       &#39;c:\\\\Users\\\\Administrator\\\\node_modules&#39;,</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//       &#39;c:\\\\Users\\\\node_modules&#39;,</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//       &#39;c:\\\\node_modules&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//     ]</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//   },</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//   &#39;3&#39;: &#39;c:\\\\Users\\\\Administrator\\\\Desktop\\\\node\\\\index.js&#39;,</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//   &#39;4&#39;: &#39;c:\\\\Users\\\\Administrator\\\\Desktop\\\\node&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在可以知道确实是在函数内部,但这个函数是什么样子呢？<br></p><p>使用 arguments 对象的 callee 属性</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">arguments</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">callee</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// function (exports, require, module, __filename, __dirname) {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// console.log(arguments.callee.toString())</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到常用的 exports, require, module, **filename, **dirname 是以参数形式传进来的<br></p><p>那么 exports 和 module.exports 有什么区别呢?</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">exports</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ===</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">exports</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>即它们指向同一个对象</p><p>所有我们在操作 exports 时 只能通过属性来赋值。而 module.exports 却可以赋值一个对象</p><p>个人理解,如有失误,请指正</p>`,14),t=[l];function p(d,r){return n(),i("div",null,t)}const c=s(e,[["render",p],["__file","index.html.vue"]]),k=JSON.parse(`{"path":"/article/709gmgy4/","title":"node之module","lang":"zh-CN","frontmatter":{"title":"node之module","tags":["moule","node"],"categories":["Node"],"copyright":true,"abbrlink":17103,"date":"2021/03/24 10:12:17","createTime":"2021/03/24 10:12:17","top":null,"author":"天火流光","permalink":"/article/709gmgy4/","description":"在前端,在浏览器中运行的 js 是没有模块的概念的,但如果把 js 放在服务器上运行,若只是简单的代码还好说,如果在大型项目中就会显得非常复杂加难以迭代维护,所以 node 引入了模块的概念。 那模块是如何实现互不影响,各自分离的呢? 我们知道在 js 中想要实现代码之间的互不影响,可以使用函数来加以分隔,使函数内部的变量待在自己的作用域范围内. 那 ...","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"],["meta",{"property":"og:url","content":"https://blog.thlg.xyz/hut/article/709gmgy4/"}],["meta",{"property":"og:site_name","content":"天火流光"}],["meta",{"property":"og:title","content":"node之module"}],["meta",{"property":"og:description","content":"在前端,在浏览器中运行的 js 是没有模块的概念的,但如果把 js 放在服务器上运行,若只是简单的代码还好说,如果在大型项目中就会显得非常复杂加难以迭代维护,所以 node 引入了模块的概念。 那模块是如何实现互不影响,各自分离的呢? 我们知道在 js 中想要实现代码之间的互不影响,可以使用函数来加以分隔,使函数内部的变量待在自己的作用域范围内. 那 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"天火流光"}],["meta",{"property":"article:tag","content":"moule"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:published_time","content":"2021-03-24T02:12:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"node之module\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-03-24T02:12:17.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"天火流光\\"}]}"]]},"headers":[],"readingTime":{"minutes":1.74,"words":521},"git":{"updatedTime":null,"contributors":[]},"autoDesc":true,"filePathRelative":"node之module.md","categoryList":[]}`);export{c as comp,k as data};
